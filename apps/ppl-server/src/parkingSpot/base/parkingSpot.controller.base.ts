/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParkingSpotService } from "../parkingSpot.service";
import { ParkingSpotCreateInput } from "./ParkingSpotCreateInput";
import { ParkingSpot } from "./ParkingSpot";
import { ParkingSpotFindManyArgs } from "./ParkingSpotFindManyArgs";
import { ParkingSpotWhereUniqueInput } from "./ParkingSpotWhereUniqueInput";
import { ParkingSpotUpdateInput } from "./ParkingSpotUpdateInput";

export class ParkingSpotControllerBase {
  constructor(protected readonly service: ParkingSpotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParkingSpot })
  async createParkingSpot(
    @common.Body() data: ParkingSpotCreateInput
  ): Promise<ParkingSpot> {
    return await this.service.createParkingSpot({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParkingSpot] })
  @ApiNestedQuery(ParkingSpotFindManyArgs)
  async parkingSpots(@common.Req() request: Request): Promise<ParkingSpot[]> {
    const args = plainToClass(ParkingSpotFindManyArgs, request.query);
    return this.service.parkingSpots({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParkingSpot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parkingSpot(
    @common.Param() params: ParkingSpotWhereUniqueInput
  ): Promise<ParkingSpot | null> {
    const result = await this.service.parkingSpot({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParkingSpot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParkingSpot(
    @common.Param() params: ParkingSpotWhereUniqueInput,
    @common.Body() data: ParkingSpotUpdateInput
  ): Promise<ParkingSpot | null> {
    try {
      return await this.service.updateParkingSpot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParkingSpot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParkingSpot(
    @common.Param() params: ParkingSpotWhereUniqueInput
  ): Promise<ParkingSpot | null> {
    try {
      return await this.service.deleteParkingSpot({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
