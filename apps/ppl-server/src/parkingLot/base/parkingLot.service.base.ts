/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ParkingLot as PrismaParkingLot } from "@prisma/client";

export class ParkingLotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParkingLotCountArgs, "select">
  ): Promise<number> {
    return this.prisma.parkingLot.count(args);
  }

  async parkingLots<T extends Prisma.ParkingLotFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingLotFindManyArgs>
  ): Promise<PrismaParkingLot[]> {
    return this.prisma.parkingLot.findMany<Prisma.ParkingLotFindManyArgs>(args);
  }
  async parkingLot<T extends Prisma.ParkingLotFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingLotFindUniqueArgs>
  ): Promise<PrismaParkingLot | null> {
    return this.prisma.parkingLot.findUnique(args);
  }
  async createParkingLot<T extends Prisma.ParkingLotCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingLotCreateArgs>
  ): Promise<PrismaParkingLot> {
    return this.prisma.parkingLot.create<T>(args);
  }
  async updateParkingLot<T extends Prisma.ParkingLotUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingLotUpdateArgs>
  ): Promise<PrismaParkingLot> {
    return this.prisma.parkingLot.update<T>(args);
  }
  async deleteParkingLot<T extends Prisma.ParkingLotDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingLotDeleteArgs>
  ): Promise<PrismaParkingLot> {
    return this.prisma.parkingLot.delete(args);
  }
}
